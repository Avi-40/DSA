//Optimal version
/*vector < int > firstNegative(vector < int > arr, int n, int k) {
    vector < int > ans(n - k + 1);
    int idx = 0;

    // Traverse for every possible window.
    for (int i = 0; i < n - k + 1; i++) {
        bool found = false;

        for (int j = i; j < i + k; j++) {
            if (arr[j] < 0) {
                found = true;
                ans[idx++] = arr[j];
                break;
            }
        }

        if (found == false) {
            ans[idx++] = 0;
        }
    }

    return ans;
}*/

vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) {
                                                 
            
            deque<long long int> dq;
            vector<long long int> ans;
            for(int i=0; i<K;i++){
                if(A[i]<0){
                    dq.push_back(i);
                }
            }
            if(dq.size()>0){
                ans.push_back(A[dq.front()]);
            }
            else{
                ans.push_back(0);
            }
            
            for(int i=K;i<N;i++){
                if(!dq.empty() && i-dq.front()>=K){
                    dq.pop_front();
                }
                if(A[i]<0){
                    dq.push_back(i);
                }
                if(dq.size()>0){
                    ans.push_back(A[dq.front()]);
                }
                else{
                    ans.push_back(0);
                }
            }
            return ans;
            
                                                 
 }
